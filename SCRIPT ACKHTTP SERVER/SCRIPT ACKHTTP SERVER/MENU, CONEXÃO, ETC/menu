#!/bin/bash
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -e /usr/lib/sshplus ]] && rm -rf /bin/menu > /dev/null 2>&1
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;34m/"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
IP=$(cat /etc/IP)
x="ok"
menu ()
{
velocity () {
aguarde () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "  \033[1;33mCARREGANDO \033[1;37m\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;34m/"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "  \033[1;33mCARREGANDO \033[1;37m\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m\033[1;32m CONCLUIDO !\033[1;37m"
tput cnorm
}
fun_tst () {
speedtest --share > speed
}
echo ""
echo -e "   \033[1;36mTESTANDO A VELOCIDADE DE BANDA !\033[0m"
echo ""
aguarde 'fun_tst'
echo ""
png=$(cat speed | sed -n '5 p' |awk -F : {'print $NF'})
down=$(cat speed | sed -n '7 p' |awk -F :  {'print $NF'})
upl=$(cat speed | sed -n '9 p' |awk -F :  {'print $NF'})
lnk=$(cat speed | sed -n '10 p' |awk {'print $NF'})
echo -e "\033[0;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;33mDOWN:\033[1;37m[ $down ]    \033[1;33m UP: \033[1;37m[ $upl ]     \033[1;33mPING: \033[1;37m[ $png ]"
echo -e ""
echo -e "\033[1;33mLINK: \033[1;37m$lnk\033[0m"
echo -e "\033[0;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
rm -rf $HOME/speed
}
#limiter
function limit1 () {
   clear
   echo -e "\n\033[1;32mINICIANDO O LIMITADOR SSH... \033[0m"
   echo ""
   fun_bar 'screen -dmS limiter limiter' 'sleep 3'
   [[ $(grep -wc "limiter" /etc/autostart) = '0' ]] && {
       echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   } || {
       sed -i '/limiter/d' /etc/autostart
	   echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   }
   echo -e "\n\033[1;32m  LIMITADOR SSH ATIVO !\033[0m"
   sleep 2
   menu
}
function limit2 () {
   clear
   echo -e "\033[1;33mPARANDO O LIMITADOR SSH... \033[0m"
   echo ""
   fun_stplimiter () {
      sleep 1
      screen -r -S "limiter" -X quit
      screen -wipe 1>/dev/null 2>/dev/null
      [[ $(grep -wc "limiter" /etc/autostart) != '0' ]] && {
          sed -i '/limiter/d' /etc/autostart
      }
      sleep 1
   }
   fun_bar 'fun_stplimiter' 'sleep 3'
   echo -e "\n\033[1;31m LIMITADOR SSH PARADO !\033[0m"
   sleep 2
   menu
}
function limit_ssh () {
[[ $(ps x | grep "limiter"|grep -v grep |wc -l) = '0' ]] && limit1 || limit2
}



#]
function onapp1 () {
clear
echo -e "\n\033[1;32mINICIANDO O ONLINE APP... \033[0m"
echo ""
apt install apache2 -y > /dev/null 2>&1
sed -i "s/Listen 80/Listen 8888/g" /etc/apache2/ports.conf >/dev/null 2>&1
service apache2 restart
rm -rf /var/www/html/server >/dev/null 2>&1
mkdir /var/www/html/server >/dev/null 2>&1
fun_bar 'screen -dmS onlineapp onlineapp' 'sleep 3'
[[ $(grep -wc "onlineapp" /etc/autostart) = '0' ]] && {
echo -e "ps x | grep 'onlineapp' | grep -v 'grep' && echo 'ON' || screen -dmS onlineapp onlineapp" >> /etc/autostart
} || {
sed -i '/onlineapp/d' /etc/autostart
echo -e "ps x | grep 'onlineapp' | grep -v 'grep' && echo 'ON' || screen -dmS onlineapp onlineapp" >> /etc/autostart
}
IP=$(wget -qO- ipv4.icanhazip.com) >/dev/null 2>&1
echo -e "\n\033[1;32m  ONLINE APP ATIVO !\033[0m"
echo -e "\033[1;31m \033[1;33mURL de Usuários Online para usar no App\033[0m"
echo -e " http://$IP:8888/server/online"
sleep 10s
menu
}
function onapp2 () {
clear
echo -e "\033[1;32mPARANDO O ONLINE APP... \033[0m"
echo ""
fun_stponlineapp () {
sleep 1s
screen -r -S "onlineapp" -X quit
screen -wipe 1>/dev/null 2>/dev/null
[[ $(grep -wc "onlineapp" /etc/autostart) != '0' ]] && {
sed -i '/onlineapp/d' /etc/autostart
}
sleep 1s
}
fun_bar 'fun_stponlineapp' 'sleep 3'
rm -rf /var/www/html/server >/dev/null 2>&1
echo -e "\n\033[1;31m ONLINE APP PARADO !\033[0m"
sleep 3s
menu
}
function onapp_ssh () {
[[ $(ps x | grep "onlineapp"|grep -v grep |wc -l) = '0' ]] && onapp1 || onapp2
}
##
function autoexec () {
   if grep "menu;" /etc/profile > /dev/null; then
      clear
      echo -e "\033[1;33mDESATIVANDO AUTO [ MENU ]\033[0m"
      offautmenu () {
         sed -i '/menu;/d' /etc/profile
      }
      echo ""
      fun_bar 'offautmenu'
      echo ""
      echo -e "\033[1;31mAUTO [ MENU ] DESATIVADO!\033[0m"
      sleep 1.5s
      menu2
   else
      clear
      echo -e "\033[1;33mATIVANDO AUTO [ MENU ]\033[0m"
      autmenu () {
         grep -v "^menu;" /etc/profile > /tmp/tmpass && mv /tmp/tmpass /etc/profile
         echo "menu;" >> /etc/profile
      }
      echo ""
      fun_bar 'autmenu'
      echo ""
      echo -e "\033[1;32mAUTO [MENU] ATIVADO!\033[0m"
      sleep 1.5s
      menu2
   fi

}
#menu2
menu2 (){
stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉)" || echo -e "\033[1;31m(OFF ○)")
stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉)" || echo -e "\033[1;31m(OFF ○)")
stson=$(ps x | grep "onlineapp"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉) " || echo -e "\033[1;31m(OFF ○) ")
stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉)" || echo -e "\033[1;31m(OFF ○)")
autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m(ON ◉) " || echo -e "\033[1;31m(OFF ○)")
_swap1=$(free -h | grep -i swap | awk {'print $2'})
[[ -e /etc/Plus-torrent ]] && stsf=$(echo -e "\033[1;32m(ON ◉)") || stsf=$(echo -e "\033[1;31m(OFF ○)")
ram1=$(free -h | grep -i mem | awk {'print $2'})
cpucores=$(grep -c cpu[0-9] /proc/stat)
clear -x
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m13 ×\033[1;34m>\033[1;34m \ \033[1;33mONLINE APP $stson \033[1;37m( MONITOR APPS. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m14 ×\033[1;34m>\033[1;34m \ \033[1;33mBLOCK TORRENT $stsf \033[1;37m( BLOCK TORRENT. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m15 ×\033[1;34m>\033[1;34m \ \033[1;33mLIMITADOR $stsl \033[1;37m( LIMITAR SSH. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m16 ×\033[1;34m>\033[1;34m \ \033[1;33mUDPGW $stsu \033[1;37m( UDP JOGOS/VOIP. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m17 ×\033[1;34m>\033[1;34m \ \033[1;33mMENU $autm \033[1;37m( ATIVAR AUTO MENU. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m18 ×\033[1;34m>\033[1;34m \ \033[1;33mBOT $stsbot \033[1;37m( BOT-SSH TELEGRAM. )\033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m19 ×\033[1;34m>\033[1;34m \ \033[1;33mMODULOS \033[1;37m( SOCKS,V2RAY. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m20 ×\033[1;34m>\033[1;34m \ \033[1;33mSPEED TEST \033[1;37m( TESTAR UPLINK. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m21 ×\033[1;34m>\033[1;34m \ \033[1;33mBLOCK WEB \033[1;37m( BLOCK TRAFEGO WEB. ) \033[0;32m"
echo -e "\033[1;34m<\033[1;37m22 ×\033[1;34m>\033[1;34m \ \033[1;33mTUNING \033[1;37m( TUNING LINUX. ) \033[0;32m"
echo -e "\033[1;34m<\033[1;37m23 ×\033[1;34m>\033[1;34m \ \033[1;33mSLURM \033[1;31m\033[1;37m( MONITORAR TRAFEGO. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m24 ×\033[1;34m>\033[1;34m \ \033[1;33mHTOP \033[1;37m( MONITORAR SISTEMA. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m25 ×\033[1;34m>\033[1;34m \ \033[1;33mGLANCES \033[1;31m\033[1;37m( MONITORAR PROCESSOS. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m26 ×\033[1;34m>\033[1;34m \ \033[1;33mNETHOGS \033[1;31m\033[1;37m( MONITORAR REDE. )\033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m27 ×\033[1;34m>\033[1;34m \ \033[1;33mMEM VIRTUAL \033[1;37m( CRIAR SWAPPING. ) \033[1;32mSWAP \033[1;37m$swap1 + \033[1;37m($swap4)\033[0;32m"
echo -e "\033[1;34m<\033[1;37m28 ×\033[1;34m>\033[1;34m \ \033[1;33mREINICIAR \033[1;37m( REINICIAR SERVER. ) \033[1;32mATIVO \033[1;37m$(uptime | awk -F, '{sub(".*up ",x,$1);print $1}')"
echo -e "\033[1;34m<\033[1;37m29 ×\033[1;34m>\033[1;34m \ \033[1;33mSENHA ROOT \033[1;37m( SENHA ROOT. ) \033[0;32m"
echo -e "\033[1;34m<\033[1;37m30 ×\033[1;34m>\033[1;34m \ \033[1;33mDETALHES \033[1;37m( INFO SERVIDOR. ) \033[1;32mRAM\033[1;37m $ram1\033[0;32m \033[1;37m+ \033[1;32mCPU\033[1;37m $cpucores"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m31 ×\033[1;34m>\033[1;34m \ \033[1;33mATT SCRIPT \033[1;37m( UPDATE SCRIPT. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m32 ×\033[1;34m>\033[1;34m \ \033[1;33mDEL SCRIPT \033[1;37m( REMOVER SCRIPT. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m33 ×\033[1;34m>\033[1;34m \ \033[1;33mHOME \033[1;37m( VOLTAR AO MENU. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m00 ×\033[1;34m>\033[1;34m \ \033[1;33mEXIT \033[1;37m( SAIR PARA LINHA DO TERMINAL. )\033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;37mACKHTTP SERVER MANAGER V 1.2    $date\033[1;37m"
sleep 0.6s
read x

case "$x" in
   13)
   onapp_ssh
   menu2
   ;;
   14)
   blockt
   menu2
   ;;
   15)
   limit_ssh
   ;;
   16)
   clear
   badvpn
   ;;
   17)
   autoexec
   ;;
   18)
   botssh
   ;;
   19)
   conexao
   ;;
   20)
   clear
   velocity
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   21)
   blocksite
   ;;
   22)
   clear
   tuning
   clear
   menu
   ;;
   23)
   clear
  echo -e "\033[1;33mPARA SAIR CLICK CTRL + C\033[1;36m"
   sleep 5s
   slurm -i eth0
   clear
   menu2
   ;;
   24)
   clear
  echo -e "\033[1;33mPARA SAIR CLICK CTRL + C\033[1;36m"
   sleep 5s
   htop
   clear
   menu2
   ;;
   25)
  echo -e "\033[1;33mPARA SAIR CLICK CTRL + C\033[1;36m"
   sleep 5s
   glances
   clear
   menu2
   ;;
   26)
   clear
  echo -e "\033[1;33mPARA SAIR CLICK CTRL + C\033[1;36m"
   sleep 5s
   nethogs -v 3
   clear
   menu2
   ;;
   27)
   swapmemory
   ;;
   28)
  clear
  echo -e "\033[1;33mSERVIDOR REINICIANDO...\033[1;36m"
  sleep 5s
  reboot
   ;;
   29)
   clear
   senharoot
   sleep 5s
   ;;
   30)
   clear
   detalhes
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   31)
   clear
   atualizar
   ;;
   32)
   clear
   delscript
   ;;
   33)
   clear
   sleep 1s
   menu
   ;;
   0|00)
   clear
   exit;
   ;;
   *)
menu2
esac
}
while true $x != "ok"
do
stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉)" || echo -e "\033[1;31m(OFF ○)")
stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉)" || echo -e "\033[1;31m(OFF ○)")
stson=$(ps x | grep "onlineapp"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉) " || echo -e "\033[1;31m(OFF ○) ")
stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m(ON ◉)" || echo -e "\033[1;31m(OFF ○)")
autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m(ON ◉) " || echo -e "\033[1;31m(OFF ○)")
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
[[ "$(cat /etc/SSHPlus/Exp)" != "" ]] && _expuser=$(cat /etc/SSHPlus/Exp) || _expuser="0"
[[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
[[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
ram1=$(free -h | grep -i mem | awk {'print $2'})
ram2=$(free -h | grep -i mem | awk {'print $4'})
ram3=$(free -h | grep -i mem | awk {'print $3'})
ram4=$(free | awk '/Mem/{printf("%.1f"), $3/($2+.000000001)*100}';)
swap1=$(free -h | grep -i swap | awk {'print $2'})
swap2=$(free -h |grep -i swap |awk {'print $4'})
swap3=$(free -h | grep -i swap | awk {'print $3'})
swap4=$(free | awk '/Swap/{printf("%.1f"), $3/($2+.000000001)*100}';)
modelo=$(cat /proc/cpuinfo |grep "model name" |uniq |awk -F : {'print $2'})
Kernel1=$(uname -s)
Kernel2=$(uname -m)
cpucores=$(grep -c cpu[0-9] /proc/stat)
date=$(date '+%Y-%m-%d <> %H:%M:%S')
_onli=$(($_ons + $_onop + $_ondrp))
_usop=$(printf '%-1s' "$(mpstat | awk 'END{print 100-$NF"%"}')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$system")
_hora=$(printf '%(%H:%M:%S)T')
_onlin=$(printf '%-5s' "$_onli")
_userexp=$(printf '%-5s' "$_expuser")
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
printf "%(%m-%d-%Y %H:%M:%S)T\n" $(date +%s)
porta_7300=$(netstat -nplt | grep 'badvpn' | awk {'print $4'} | cut -d: -f2 | xargs)
porta_80=$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)
GHZ=`lscpu |awk -F : '($1=="CPU MHz") {printf "%3.2fGHz\n", $2/1000}'`
system=$(cat /etc/issue.net)
clear -x
echo -e "\033[1;37m$system | \033[1;32mRAM \033[1;37m($ram4) + \033[1;32mCPU\033[1;37m ($_usop) + \033[1;32mSWAP \033[1;37m($swap4)"
echo -e "\033[0;32m--------------------"
echo -e "\033[1;34m<\033[1;37m01 ×\033[1;34m>\033[1;34m \ \033[1;33mCR USUARIO \033[1;37m( ADD USER. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m02 ×\033[1;34m>\033[1;34m \ \033[1;33mCR TESTE \033[1;37m( ADD TESTE. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m03 ×\033[1;34m>\033[1;34m \ \033[1;33mRESUMO \033[1;37m( INFO DE USER. ) \033[1;36mCRIADO \033[1;37m$_tuser \033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m04 ×\033[1;34m>\033[1;34m \ \033[1;33mALT SENHA \033[1;37m( ALTERAR SENHA SSH. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m05 ×\033[1;34m>\033[1;34m \ \033[1;33mALT DATA \033[1;37m( ALTERAR DATA SSH. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m06 ×\033[1;34m>\033[1;34m \ \033[1;33mALT LIMITE \033[1;37m( ALTERAR LIMITE SSH. )\033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m07 ×\033[1;34m>\033[1;34m \ \033[1;33mDEL USER \033[1;37m( APAGAR USER. ) \033[0;32m"
echo -e "\033[1;34m<\033[1;37m08 ×\033[1;34m>\033[1;34m \ \033[1;33mDEL EXP \033[1;37m( USER VENCIDOS. ) \033[1;31mEXPIRADO \033[1;37m$_userexp"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m09 ×\033[1;34m>\033[1;34m \ \033[1;33mBANNER SSH \033[1;37m( TEXTO SSH. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m10 ×\033[1;34m>\033[1;34m \ \033[1;33mBACKUP SSH \033[1;37m( BACKUP SSH. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m11 ×\033[1;34m>\033[1;34m \ \033[1;33mMONITOR SSH \033[1;37m( MONITORAR SSH.) \033[1;32mONLINE \033[1;37m$_onlin\033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;34m<\033[1;37m12 ×\033[1;34m>\033[1;34m \ \033[1;33mMENU 2 \033[1;37m( OUTROS RECURSOS. )\033[0;32m"
echo -e "\033[1;34m<\033[1;37m00 ×\033[1;34m>\033[1;34m \ \033[1;33mEXIT \033[1;37m( SAIR PARA LINHA DO TERMINAL. )\033[0;32m"
echo -e "\033[0;32m-------------------------------------------------------"
echo -e "\033[1;37mACKHTTP SERVER MANAGER V 1.2    $date\033[1;37m"
sleep 0.6s
read x
case "$x" in
   1 | 01)
   clear
   criarusuario
   echo -ne "\n\033[1;33mENTER \033[1;33mPARA VOLTAR AO \033[1;33mMENU!\033[0m"; read
   ;;
   2 | 02)
   clear
   criarteste
   echo -ne "\n\033[1;33mENTER \033[1;33mPARA VOLTAR AO \033[1;33mMENU!\033[0m"; read
   ;;
   3 | 03)
   clear
   infousers
   echo -ne "\n\033[1;33mENTER \033[1;33mPARA VOLTAR AO \033[1;33mMENU!\033[0m"; read
   ;;
   4 | 04)
   clear
   alterarsenha
   sleep 5s
   ;;
   5 | 05)
   clear
   mudardata
   sleep 5s
   ;;
   6 | 06)
   clear
   alterarlimite
   sleep 5s
   ;;
   7 | 07)
   clear
   remover
   sleep 5s
   ;;
   8 | 08)
   clear
   expcleaner;uexpired
   echo ""
   sleep 5s
   ;;
   9 | 09)
   clear
   banner
   sleep 5s
   ;;
   10 | 10)
   clear
   userbackup
   ;;
   11 | 11)
   clear
   sshmonitor
   echo -ne "\n\033[1;33mENTER \033[1;33mPARA VOLTAR AO \033[1;33mMENU!\033[0m"; read
   ;;
   12 | 12)
   clear
   menu2
   ;;
   0|00)
   clear
   exit;
   ;;
   *)
esac
done
}
menu
#fim
